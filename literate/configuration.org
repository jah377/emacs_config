#+TITLE: Literate Emacs Configuration
#+AUTHOR: Jonathan A. Harris | Machine Learning Programs
#+EMAIL: jonathan.harris@mlprograms.com
#+DATE: Monday, April 15, 2024
#+PROPERTY: header-args:emacs-lisp :results silent :tangle ../init.el

* Introduction

This is my literate Emacs configuration file. My goal is to create my
own Emacs configuration from scratch and eventually work strictly from
my local machine. While it is easier to copy-paste things from the MLP
configuration or online, it seems important to know what each line
does and why I want it in my config.

This =org= file is used to generate several files responsible for
configuring Emacs, including:

+ early-init.el :: Basic settings before package and UI initialization
+ init.el :: Remaining configuration from our literate file

_This org file is not loaded directly_. To modify my Emacs setup, I edit
the file and then call =org-babel-tangle= (~C-c C-v t~). This approach is
more desirable than the more common method of loading the literate
file directly in the =init.el= using ~org-babel-load-file~, which requires
loading =org= before starting Emacs (slow).

* Core

** Early-Init.el

The =early-init.el= file, introduced with Emacs27, is the first file
that Emacs reads when starting up (before =init.el=). In principal, the
early initialization file should set-up a few basic things before
Emacs produces the initial frame, and should not depend on any
packages. Here, we would like to address the following:

+ Garbage Collection :: Garbage collection (GC) ensures that a program
  does not exceed its memory quote or reach a point that it can no
  longer function. It also frees up developers from having to manually
  manage a program's memory which, in turn, reduces the potential for
  memory-related bugs. We attempt to reduce startup times by changing
  two variables:
  - gc-cons-threshold :: Maximize threshold used to trigger GC. This
    is employed by Doom-Emacs [[[https://github.com/doomemacs/doomemacs/blob/master/early-init.el][doomemacs/early-init.el]]].
  - gc-cons-percentage :: Trigger GC based on %memory allocation;
    ignore if less than =gc-cons-threshold=.

+ User Interface :: Disable UI elements as soon as possible

#+begin_src emacs-lisp :tangle ../early-init.el
;;; -*- lexical-binding: t -*-

;; Maximize gc threshold for initialization
(setq gc-cons-threshold most-positive-fixnum)

;; Trigger GC based on %allocation, ignored if < `gc-cons-threshold`
(setq gc-cons-percentage 0.6)

;; Disable unwanted UI elements as early as possible
(menu-bar-mode   -1)
(scroll-bar-mode -1) ; Visible scrollbar
(scroll-all-mode -1) ; Synchronized scrolling of buffers
(tool-bar-mode   -1)
(tooltip-mode    -1)

(setq-default
 inhibit-startup-screen t     ; Disable start-up screen
 inhibit-startup-message t    ; Disable start-up message
 initial-scratch-message ""   ; Empty initial *scratch* buffer
 initil-buffer-choice t)      ; Open *scratch* buffer at init

;; Disable audible dinging and use visible bell
(setq visible-bell t)

;;; early-init.el ends here
#+end_src

** Init.el

Here, we perform the minimum to configure Emacs using the current
org-file. To do so, we address the following:

+ Package Resources :: Emacs packages are installed from hosted
  archives. Here, we define which archives and specify the priority
  when downloading packages. The =use-package= resource is now included
  with Emacs29.

+ Garbage Collection :: The "Garbage Collection Magic Hack" package
  [[[https://github.com/emacsmirror/gcmh][github/gcmh]]] is employed by =Doom-Emacs= to enforce a "sneaky" GC
  strategy. Previously, we maximized GC threshold to improve startup
  times. Here, add hooks to reset these values after Emacs
  initialization.

+ Load Config File :: Must call =org-babel-tangle= to generate =config.el=
  from this narrative.

+ Tidy Emacs Directory :: The default paths used to store
  configuration files and persistent data are not consistent across
  Emacs packages. Some packages put these files directly in
  ~user-emacs-directory~ or ~$HOME~. The =no-littering= package fixes this
  by changing the values of path variables. Related, Emacs packages
  may automatically generate customization, which are then stored at
  the bottom of the =init.el= config file. To prevent the additional
  clutter, we move these customizations to a separate
  =custom-settings.el= file.

*N.B.* The remaining src-blocks in this narrative also tangle to the
=init.el= file. Still, it is worth isolating the "core" settings
necessary for the configuration.

#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-

;; Initialize package resources
(setq package-archives
      '(("gnu elpa"  . "https://elpa.gnu.org/packages/")
        ("melpa"     . "https://melpa.org/packages/")
        ("nongnu"    . "https://elpa.nongnu.org/nongnu/"))
      package-archive-priorities
      '(("melpa"    . 6)
        ("gnu elpa" . 5)
        ("nongnu"   . 4)))

;; Is this still necessary since 'use-package' now builtin?
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; Standardize `use-package` settings
(setq use-package-always-ensure t)
(setq use-package-compute-statistics t)
(setq use-package-verbose t)

;; Uncomment to refresh packages everytime Emacs starts
;; (package-refresh-contents t)

;; Keep 'user-emacs-directory' tidy
(use-package no-littering
  :demand t

  :config
  ;; Save customizations in 'etc' sub-directory
  ;; https://github.com/emacscollective/no-littering
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))

  ;; Load file
  (when (file-exists-p custom-file)
    (load custom-file)))

;; Minimize GC interference
(use-package gcmh
  :init (gcmh-mode 1)
  :hook
  ;; Perform GC at the end of startup
  (after-init . garbage-collect)
  ;; Reset GC params after loading startup (after init-hook)
  (emacs-startup . (lambda ()
                     (setq gc-cons-percentage 0.1
                           gcmh-high-cons-threshold (* 32 1024 1024)
                           gcmh-idle-delay 30))))
#+end_src
