#+TITLE: Literate Emacs Configuration
#+AUTHOR: Jonathan A. Harris, MSc.
#+DATE: Monday, April 15, 2024
#+PROPERTY: header-args:emacs-lisp :results silent :tangle ../init.el

* Introduction

This is my literate Emacs configuration file. My goal is to create my
own Emacs configuration from scratch and eventually work strictly from
my local machine. While it is easier to copy-paste things from the MLP
configuration or online, it seems important to know what each line
does and why I want it in my config.

This =org= file is used to generate several files responsible for
configuring Emacs, including:

+ early-init.el :: Basic settings before package and UI initialization
+ init.el :: Remaining configuration from our literate file

_This org file is not loaded directly_. To modify my Emacs setup, I
edit the file and then call =org-babel-tangle= (~C-c C-v t~). This
approach is more desirable than the more common method of loading the
literate file directly in the =init.el= using ~org-babel-load-file~,
which requires loading =org= before starting Emacs (slow).

* Core
** Early-Init.el

The =early-init.el= file, introduced with Emacs27, is the first file
that Emacs reads when starting up (before =init.el=). In principal,
the early initialization file should set-up a few basic things before
Emacs produces the initial frame, and should not depend on any
packages. Here, we would like to address the following:

+ Garbage Collection :: Garbage collection (GC) ensures that a program
  does not exceed its memory quote or reach a point that it can no
  longer function. It also frees up developers from having to manually
  manage a program's memory which, in turn, reduces the potential for
  memory-related bugs. We attempt to reduce startup times by changing
  two variables:

  - gc-cons-threshold :: Maximize threshold used to trigger GC. This
    is employed by Doom-Emacs [[[https://github.com/doomemacs/doomemacs/blob/master/early-init.el][doomemacs/early-init.el]]].

  - gc-cons-percentage :: Trigger GC based on %memory allocation;
    ignore if less than =gc-cons-threshold=.

+ User Interface :: Disable UI elements as soon as possible

#+begin_src emacs-lisp :tangle ../early-init.el
;;; -*- lexical-binding: t -*-

;; Maximize gc threshold for initialization
(setq gc-cons-threshold most-positive-fixnum)

;; Trigger GC based on %allocation, ignored if < `gc-cons-threshold`
(setq gc-cons-percentage 0.6)

;; Disable unwanted UI elements as early as possible
(menu-bar-mode   -1)
(scroll-bar-mode -1) ; Visible scrollbar
(scroll-all-mode -1) ; Synchronized scrolling of buffers
(tool-bar-mode   -1)
(tooltip-mode    -1)

(setq-default
 inhibit-startup-screen t     ; Disable start-up screen
 inhibit-startup-message t    ; Disable start-up message
 initial-scratch-message ""   ; Empty initial *scratch* buffer
 initil-buffer-choice t)      ; Open *scratch* buffer at init

;; Disable audible dinging and use visible bell
(setq visible-bell t)

;; Typing 'yes' and 'no' is difficult
(setq use-short-answers t)

;; Prevent mistaken quits
(setq confirm-kill-emacs 'y-or-n-p)

;;; early-init.el ends here
#+end_src

** Init.el

Here, we perform the minimum to configure Emacs using the current
org-file. To do so, we address the following:

+ Package Resources :: Emacs packages are installed from hosted
  archives. Here, we define which archives and specify the priority
  when downloading packages. The =use-package= resource is now
  included with Emacs29.

+ Garbage Collection :: The "Garbage Collection Magic Hack" package
  [[[https://github.com/emacsmirror/gcmh][github/gcmh]]] is employed by =Doom-Emacs= to enforce a "sneaky" GC
  strategy. Previously, we maximized GC threshold to improve startup
  times. Here, add hooks to reset these values after Emacs
  initialization.

+ Load Config File :: Must call =org-babel-tangle= to generate
  =config.el= from this narrative.

+ Tidy Emacs Directory :: The default paths used to store
  configuration files and persistent data are not consistent across
  Emacs packages. Some packages put these files directly in
  ~user-emacs-directory~ or ~$HOME~. The =no-littering= package fixes
  this by changing the values of path variables. Related, Emacs
  packages may automatically generate customization, which are then
  stored at the bottom of the =init.el= config file. To prevent the
  additional clutter, we move these customizations to a separate
  =custom-settings.el= file.

*N.B.* The remaining src-blocks in this narrative also tangle to the
=init.el= file. Still, it is worth isolating the "core" settings
necessary for the configuration.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-

;; Initialize package resources
(setq package-archives
      '(("gnu elpa"  . "https://elpa.gnu.org/packages/")
        ("melpa"     . "https://melpa.org/packages/")
        ("nongnu"    . "https://elpa.nongnu.org/nongnu/"))
      package-archive-priorities
      '(("melpa"    . 6)
        ("gnu elpa" . 5)
        ("nongnu"   . 4)))

;; Is this still necessary since 'use-package' now builtin?
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; Standardize `use-package` settings
(require 'use-package-ensure)
(setq use-package-always-ensure t)
(setq use-package-compute-statistics t)
(setq use-package-verbose t)

;; Uncomment to refresh packages everytime Emacs starts
;; (package-refresh-contents t)

;; Keep 'user-emacs-directory' tidy
(use-package no-littering
  :demand t

  :config
  ;; Save customizations in 'etc' sub-directory
  ;; https://github.com/emacscollective/no-littering
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))

  ;; Load file
  (when (file-exists-p custom-file)
    (load custom-file)))

;; Minimize GC interference
(use-package gcmh
  :init (gcmh-mode 1)
  :hook
  ;; Perform GC at the end of startup
  (after-init . garbage-collect)
  ;; Reset GC params after loading startup (after init-hook)
  (emacs-startup . (lambda ()
                     (setq gc-cons-percentage 0.1
                           gcmh-high-cons-threshold (* 32 1024 1024)
                           gcmh-idle-delay 30))))
#+end_src

* Visuals
** Theme

#+begin_src emacs-lisp
;; Disable theme before loading to avoid funkiness
(defadvice load-theme (before disable-themes-first activate)
  (mapc #'disable-theme custom-enabled-themes))

(use-package doom-themes
  :custom
  ;; Some themes do not have italics
  (doom-themes-enable-bold t "default")
  (doom-themes-enable-italic t "default")
  (doom-themes-padded-modeline t "pad modeline for readability")

  :config
  ;; Indicate errors by flashing modeline
  (doom-themes-visual-bell-config)
  ;; correct (and improve) org-mode native fontification
  (doom-themes-org-config))

(defun jh/light ()
  "Turn on light theme."
  (interactive)
  (load-theme 'doom-tomorrow-day t))

(defun jh/dark ()
  "Turn on dark theme."
  (interactive)
  (load-theme 'doom-one t))

;; Use light theme on startup
(add-hook 'after-init-hook (lambda () (jh/dark)))
#+end_src

** Font

Example of emphasis markers in org-mode include *bold*, ~code~,
=verbatim=, /italics/, _underline_.

The following fonts were downloaded and added to the configuration by
doing the following:
+ Jetbrains Mono :: Manually downloaded from [[https://www.jetbrains.com/lp/mono/][jetbrains.com]]. The font
  was installed by following the [[https://www.jetbrains.com/lp/mono/#how-to-install][how-to]] instructions verbatim.

*N.B.* This section pulls heavily from [[https://github.com/daviwil/dotfiles/blob/emacs-home-service/.emacs.d/modules/dw-core.el][github/daviwil/.emacs.d]].

#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :font "JetBrains Mono"
                    :height 100
                    :weight 'medium)


;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil
                    :font "JetBrains Mono"
                    :height 100
                    :weight 'medium)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil
                    :font "JetBrains Mono"
                    :height 100
                    :weight 'medium)
#+end_src

** Icons

#+begin_src emacs-lisp
(use-package nerd-icons
  :config
  ;; Download nerd-icons if directory not found
  (unless (car (file-expand-wildcards
                (concat user-emacs-directory "elpa/nerd-icons-*")))
    (nerd-icons-install-fonts t)))
#+end_src

** Modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :config (doom-modeline-mode 1)
  :custom
  (doom-modeline-buffer-file-name-style 'truncate-with-project "display project/./filename")
  (doom-modeline-buffer-encoding nil "dont care about UTF-8 badge")
  (doom-modeline-vcs-max-length 30 "limit branch name length")
  (doom-modeline-enable-word-count t "turn on wordcount"))
#+end_src

** Cursor

#+begin_src emacs-lisp
;; Builtin Emacs minor mode highlights line at point
(global-hl-line-mode 1)

;; Flash cursor location when switching buffers
(use-package beacon
  :config (beacon-mode 1))
#+end_src

I frequently use ~magit-find-file~ to view files on remote
repositories (=magit-blob-mode=). It would be nice if the cursor would
change shape to indicate whether my current buffer is the local or
remote version of a file. *N.B.* It is not possible to change the
~cursor-color~ locally. Previous attempts to change the cursor color
to red did not revert the color back to the theme color.

#+begin_src emacs-lisp
;; Use bar for cursor instead of box
(defvar standard-cursor-type 'bar)
(setq-default cursor-type standard-cursor-type)

(defun jh/hollow-cursor-if-magit-blob-mode ()
  "Change cursor to hollow-box if viewing magit-blob file"
  (if magit-blob-mode
      (setq cursor-type 'hollow)
    (setq cursor-type standard-cursor-type)))

(add-hook 'magit-blob-mode-hook 'jh/hollow-cursor-if-magit-blob-mode)
#+end_src

** Highlighting

#+begin_src emacs-lisp
;; Global minor mode to highlight thing under point
(use-package highlight-thing
  :demand t
  :hook (prog-mode org-mode)
  :custom
  (highlight-thing-exclude-thing-under-point t)
  (highlight-thing-all-visible-buffers t)
  (highlight-thing-case-sensitive-p t)
  (highlight-thing-ignore-list
   '("False" "True", "return", "None", "if", "else", "self",
     "import", "from", "in", "def", "class")))
#+end_src

** Line Numbering

#+begin_src emacs-lisp
;; Builtin Emacs minor-mode shows column number in mode-line
(column-number-mode 1)

;; Hook builtin Emacs minor-mode to only display line numbers in prog-mode
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

* Formatting
** Indentation Style

Emacs comes with a default indentation style that is not
desirable. Here, we define the indentation style for [[https://www.gnu.org/software/emacs/manual/html_node/ccmode/][CC Mode]] and set
the basic offset to =4= (credit: [[https://stackoverflow.com/questions/37105356/change-tab-width-in-emacs][StackOverflow]]); [[https://www.emacswiki.org/emacs/IndentingC][emacswiki]] contains an
example of the change.  Additionally, we modify the standard indent
and tab behavior. Finally, TeX files ignores tabs, so we want to
prevent using TAB to add multiple spaces when formatting a region
[[[https://www.gnu.org/software/emacs/manual/html_node/eintr/Indent-Tabs-Mode.html][gnu.org]]]

#+begin_src emacs-lisp
(setq
 c-default-style "linux"
 c-basic-offset 4
 tab-width 4)

;; set indentation for enriched text
(setq-default standard-indent 4)

;; use tab for auto-complete selection
(setq-default tab-always-indent 'complete)

;; prevent extraneous tabs -- affects TeX
(setq-default indent-tabs-mode nil)
#+end_src

** Line Wrapping

#+begin_src emacs-lisp
;; Builtin Emacs minor-mode wraps long text to next line
(global-visual-line-mode 1)
#+end_src

** Tidy White Spaces

The builtin =whitespace-mode= is useful for visualizing and
automatically cleaning up white-spaces in our buffers. [[https://www.emacswiki.org/emacs/WhiteSpace][Emacswiki]]
provides a nice overview of the settings.

The ~whitespace-style~ variable specifies how blank white-spaces are
visualized and the following are included in our configuration:
  + face :: Enable all visualization via faces. Required for
    visualization of many white-spaces listed below.
  + trailing :: Trailing blanks are visualized via faces.
  + lines-tail :: Columns beyond ~whitespace-line-column~ are highlighted
    via faces (must exclude =lines= in our configuration).
  + empty :: Empty lines at beginning/end of buffer are visualized.
  + indentation::space :: TABs at beginning of lines are visualized.
  + space-before-tab::tab :: SPACEs before TAB are visualized.

#+begin_src emacs-lisp
;; Builtin Emacs variable highlights empty lines
(setq indicate-empty-lines t)

;; Visualize whitespace and remove on cleanup
(use-package whitespace
  :hook ((prog-mode . whitespace-mode)
         (before-save . whitespace-cleanup))
  :custom
  (whitespace-line-column 79)
  (whitespace-style '(face trailing lines-tail empty
                           indentation::space space-before-tab::tab))
  :config
  ;; Turn off global whitespace mode
  (global-whitespace-mode 0))
#+end_src

** Naming Convention

#+begin_src emacs-lisp
;; Unique buffers of identical files denoted with parent directory name
(setq uniquify-buffer-name-style 'forward)

;; Change frame title to buffer name
(setq frame-title-format
      '("Emacs: " (:eval (if (buffer-file-name)
                             (abbreviate-file-name (buffer-file-name)) "%b"))))
#+end_src

** Overwrite Active Region

#+begin_src emacs-lisp
;; Builtin Emacs minor-mode overwrites active region when typing/pasting
(delete-selection-mode 1)
#+end_src

** Delimiters

#+begin_src emacs-lisp
;; Builtin Emacs mode inserts closing delimiter upon typing an open delimiter
(electric-pair-mode 1)

;; Prevent "())" if hitting ")" after 'electric-pair-mode' completes "()"
(setq electric-pair-skip-self t)

;; Builtin Emacs mode highlights matching delimiter pairs
(show-paren-mode 1)
(setq-default show-paren-style 'parenthesis ;; Highlight delimiters, not contents
              show-paren-when-point-in-periphery t) ;; Highlight even if ws present
#+end_src

* Behavior
** Killing Buffers

#+begin_src emacs-lisp
;; Do not ask if I want to kill a buffer (C-x C-k)
(setq kill-buffer-query-functions nil)

;; Kill current buffer instead of selecting it from minibuffer
(global-set-key (kbd "C-x M-k") 'kill-current-buffer)
#+end_src
* Mini-Buffer
** General Mini-Buffer Behavior

#+begin_src emacs-lisp
;; Enable recursive minibuffers
(setq enable-recursive-minibuffers t)
#+end_src

** Vertico

Out of the box, Emacs requires the user to iteratively probe
=*Completion*= buffer as they blindly type the name of the desired
buffer or file-path when calling ~switch-to-buffer~ or ~file-file~, for
example. _Annoying_. Alternatively, the =Vertico= package displays these
results directly in the mini-buffer and additional functionality is
provided by =Vertico-Directory=. The separate package =Savehist= saves the
mini-buffer history so previous completions are more quickly
available.

*N.B.* The author of =Vertico= recommends activating the packages in
the ~:init~ section of =use-package= such that the mode gets enabled
right away. Note that this forces loading the package.

#+begin_src emacs-lisp
;; Mini-buffer completion
(use-package vertico
  :init (vertico-mode 1)
  :custom (vertico-cycle t "Cyle to top of list"))

;; Save minibuffer history for 'Vertico'
(use-package savehist
  :init (savehist-mode 1))

;; Configure directory extension.
(use-package vertico-directory
  :after vertico
  :ensure nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

** Marginalia

The =marginalia= package provides supplemental information to
mini-buffer completions. For example, file permissions/size/timestamp
data when searching for a file using ~M-x find-file~.

#+begin_src emacs-lisp
;; Provides additional data to mini-buffer completion
(use-package marginalia
  ;; Same reason as 'vertico' and 'savehist'
  :init (marginalia-mode 1))

;; Add nerd-icons to mini-buffer marginalia
(use-package nerd-icons-completion
  :after (marginalia nerd-icons)
  :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
  :config (nerd-icons-completion-mode))
#+end_src

** Orderless

The =orderless= package provides mini-buffer completion irrespective
of regex pattern order. In practice, searching for =README.org=
auto-completes to the full file path, instead of needing to first
enter the parent directory, then the sub-directory, etc etc.

*N.B.* Below is copied directly from [[https://github.com/oantolin/orderless/tree/master][github/orderless]]

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** TODO Consult

=Consult= is a powerful package for Emacs that enhances the
mini-buffer experience by providing advanced completion and selection
capabilities.

+ [[https://github.com/condy0919/.emacs.d/blob/8519a2af5847ecb69ff841db8ef76ed42465fb80/lisp/init-minibuffer.el#L22][condy0919]] :: example of remapping existing keybindings

*N.B.* This is pulled from github. Will configure later.

#+begin_src emacs-lisp
(use-package consult
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
)
#+end_src

** Custom Functionality
*** Prompt Indicator to ~completing-read-multiple~

Recommended in the configuration of =vertico= package [[[https://github.com/minad/vertico][github/vertico]]],
the custom function ~crm-indicator~ adds an indicator to the completion
prompt when using ~completing-read-multiple~ which can be useful for
visually distinguishing prompts or results.

#+begin_src emacs-lisp
(defun crm-indicator (args)
  "Add indicator to completion promp when using 'completing-read-multiple'"
  (cons (format "[CRM%s] %s"
                (replace-regexp-in-string
                 "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                 crm-separator)
                (car args))
        (cdr args)))
(advice-add #'completing-read-multiple :filter-args #'crm-indicator)
#+end_src

For example, calling the example function ~test-crm-indicator~ indicates
that selecting multiple options is both possible using a
comma-separator. *N.B.* src-block not tangled to configuration file.

#+begin_src emacs-lisp :tangle no
(defun test-crm-indicator ()
  "A custom function using completing-read-multiple."
  (interactive)
  (let ((choices '("Option A" "Option B" "Option C")))
    (completing-read-multiple "Choose options: " choices)))
#+end_src

*** Make Minibuffer Prompt Read-Only

Again, recommended in the configuration of the =vertico= package
[[[https://github.com/minad/vertico][github/vertico]]]. This code defines the minibuffer prompt to be
read-only and makes the cursor intangible when it is over the
minibuffer prompt. In other words, text in the minibuffer cannot be
selected or modified by the cursor. This can be useful for creating a
visually distinct and non-editable minibuffer prompt.

#+begin_src emacs-lisp
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))

(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

For example if ~(setq minibuffer-prompt-properties nil)~ and we call
~M-x~, it would be possible to modify the prompt by moving the cursor
back ~C-b~ and deleting M, -, or x. _Not ideal_.

*** Close Minibuffer From Anywhere in Emacs

The function ~keyboard-quit~ does not close the minibuffer when the
cursor is somewhere else. Lets change that.

#+begin_src emacs-lisp
;; Closes minibuffer regardless of point location
(advice-add 'keyboard-quit :before (lambda ()
                                     (when (active-minibuffer-window)
                                       (abort-recursive-edit))))
#+end_src

*** Jump to Minibuffer

#+begin_src emacs-lisp
(defun jh/jump-to-minibuffer ()
  "Move point to minibuffer."
  (interactive)
  (when-let ((minibuffer-window (active-minibuffer-window)))
    (select-window minibuffer-window)))
#+end_src

* Org-Mode
** General Settings

#+begin_src emacs-lisp
(use-package org
  :demand t
  :bind (("C-c l" . org-store-link))
  :hook (;; Refresh inline images after executing scr-block
         (org-babel-after-execute . (lambda () (org-display-inline-images nil t)))
         ;; Cleanup whitespace when entering/exiting org-edit-src buffer
         (org-src-mode . whitespace-cleanup))

  :custom
  ;; Org-Mode structure settings
  (org-hide-leading-stars t "Use org-modern bullets for header level")
  (org-startup-folded t     "Fold headers by default")
  (org-startup-indented t   "Align text vertically with header level")
  (org-adapt-indentation t  "Indent w.r.t. org-header level")

  ;; Text behavior settings
  (org-hide-emphasis-markers t "Remove =STR= emphasis markers")
  (org-special-ctrl-a/e t      "C-a/e jump to start/end of headline text")

  ;; Babel / Source code settings
  (org-confirm-babel-evaluate nil "Do not confirm src-block evaluation")
  (org-src-window-setup 'current-window "Use current buffer for src-context")
  (org-src-preserve-indentation t "Align src code with leftmost column")
  (org-src-ask-before-returning-to-edit-buffer t "Turn off prompt before edit buffer")

  ;; Figure settings
  (org-display-remote-inline-images 'cache "Allow inline display of remote images")
  (org-startup-with-inline-images t "Include images when opening org-file")

  ;; File path settings
  (org-link-file-path-type 'relative "Use relative links for org-insert-link")

  ;; Misc. settings
  ;; Cache error -- https://emacs.stackexchange.com/a/42014
  (org-element-use-cache nil "Turn off due to frequent error")
  (org-ellipsis "▾"          "Indicator for collapsed header")

  ;; ? speed-key opens Speed Keys help.
  (org-use-speed-commands
   ;; If non-nil, 'org-use-speed-commands' allows efficient
   ;; navigation of headline text when cursor is on leading
   ;; star. Custom function allows use of Speed keys if on ANY
   ;; stars.
   (lambda ()
     (and (looking-at org-outline-regexp)
          (looking-back "^\**"))))

  ;; TODO :: use yassnippet instead
  (org-structure-template-alist '(("c" . "comment")
                                  ("q" . "quote")
                                  ("p" . "src python")
                                  ("P" . "src python :results silent")
                                  ("e" . "src emacs-lisp")))

  :config
  ;; Improved vertical scrolling when images are present
  (use-package iscroll
    :hook (org-mode)))
#+end_src

** Org-Modern

The =org-modern= package improves the visuals of org-mode by styling the
headlines, keywords, tables, and source-blocks.

#+begin_src emacs-lisp
;; Improve visuals by styling headlines, keywords, tables, etc
(use-package org-modern
  :after org
  :commands (org-modern-mode org-modern-agenda)
  :hook ((org-mode                 . org-modern-mode)
         (org-agenda-finalize-hook . org-modern-agenda))
  :custom((org-modern-block-fringe 5)
          (org-modern-star '("◉" "○" "●" "○" "●" "○" "●"))))
#+end_src

** Org-Appear

The =org-appear= reveals hidden emphasis markers only if the point is
inside the markers. We also extend this functionality to LaTeX.

#+begin_src emacs-lisp
(use-package org-appear
  :hook (org-mode)
  :custom (org-appear-inside-latex t))
#+end_src

** Org-Agenda
:agenda-sources:
+ doc.norang.ca :: Indepth agenda configuration [[[http://doc.norang.ca/org-mode.html#HowToUseThisDocument][blog]]]
+ SystemCrafters :: Basic agenda configuration [[[https://www.youtube.com/watch?v=PNE-mgkZ6HM&t=2728s][youtube]]]
+ DistroTube :: Basic agenda configuration [[[https://www.youtube.com/watch?v=8BOiRmjw5aU&t=138s][youtube]]]
+ Protesilaos :: How to customize an agenda [[[https://www.youtube.com/watch?v=UqtBXrzXPgQ][youtube]]]
+ LibrePhoenix :: =org-super-agenda= configuration [[[https://www.youtube.com/watch?v=a_WNtuefREM&t=997s][youtube]]]
:end:

#+begin_src emacs-lisp
(use-package org
  :after consult
  :bind (("C-c a" . org-agenda)
         ("C-c A" . consult-org-agenda))
  :custom
  (org-agenda-files '("~/agenda/"))
  (org-agenda-window-setup 'current-window "Open in same window as called")
  (org-agenda-restore-windows-after-quit t "Keep window format after quit")
  (org-agenda-block-separator 8411         "Separator character")
  (org-use-fast-todo-selection t "Select todo keywords from menu")
  (org-log-into-drawer t         "Collapse log entries into drawer under task")
  (org-agenda-start-with-log-mode t)

  ;; Disable state changing via S-left or S-right
  (org-treat-S-cursor-todo-selection-as-state-change nil)


  ;; TODO(t)    :: set fast-access key from agenda view
  ;; TODO(t@)   :: record note with timestamp
  ;; TODO(t@/!) :: record timestamp when leaving state
  (org-todo-keywords '((sequence
                        "TODO(t@/!)"      ;; Document task
                        "ACTIVE(a@/!)"    ;; Actively working on task
                        "WAITING(w@/!)"   ;; Waiting for event related to task
                        "HOLD(h@/!)"      ;; Task on hold
                        "|" "DONE(d!)" "CANCELLED(x@/!)"))))

  ;; ;; Automatically assign tags to tasks based on state changes
  ;; (org-todo-state-tags-triggers
  ;;  '(("TODO" ("TO-START" . t))
  ;;    ("ACTIVE" ("TO-START") ("ACTION" . t))
  ;;    ("WAITING" ("TO-START") ("ACTION") ("WAITING" . t))
  ;;    ("TODO" ("ACTION") ("WAITING") ("HOLD") ("CANCELLED"))
  ;;    ("DONE" ("TO-START") ("ACTION") ("WAITING") ("HOLD") ("CANCELLED"))))
#+end_src

** Org-Capture

#+begin_src emacs-lisp
(use-package org
  :bind ("C-C c" . org-capture)
  :init
  ;; Define org-agenda file paths for templates
  (defconst jh/work-agenda (concat jh/agenda-dir "work.org"))
  (defconst jh/personal-agenda (concat jh/agenda-dir "learning.org"))
  :custom
  ;; Streamline creation of todo task headers
  (org-capture-templates
   '(("m" "mlps" entry (file jh/work-agenda)
      "* TODO %^{ENTER TASK} %^g\n:PROPERTIES:\n:category: mlps\n:end:\n\n%?")
     ("r" "robovisor" entry (file jh/work-agenda)
      "* TODO %^{ENTER TASK} %^g\n:PROPERTIES:\n:category: robovisor\n:end:\n\n%?")
     ("e" "enrichments" entry (file jh/work-agenda)
      "* TODO %^{ENTER TASK} %^g\n:PROPERTIES:\n:category: enrich\n:end:\n\n%?")
     ("c" "emacs-config" entry (file jh/work-agenda)
      "* TODO %^{ENTER TASK} %^g\n:PROPERTIES:\n:category: emacs\n:end:\n\n%?"))))
#+end_src

* Version Control

The =magit= package is a texted-based user interface to Git (Git
Porcelain) inside Emacs [https://magit.vc/].

Related, the =git-gutter= package flags lines that contain uncommitted
changes (or changes not staged).
  + +  :: New lines
  + [] :: Modified lines
  + -  :: Removed lines

#+begin_src emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)
  :diminish magit-minor-mode
  :hook (git-commit-mode . (lambda () (setq fill-column 72)))
  :mode ("/\\.gitmodules\\'" . conf-mode)
  :custom
  ;; hide ^M chars at the end of the line when viewing diffs
  (magit-diff-hide-trailing-cr-characters t)

  ;; Limit legth of commit message summary
  (git-commit-summary-max-length 50)

  ;; Open status buffer in same buffer
  (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1))

(use-package git-gutter
  :hook (prog-mode org-mode)
  :bind (("C-x P" . git-gutter:previous-hunk)
         ("C-x N" . git-gutter:next-hunk)
         ("C-x G" . git-gutter:popup-hunk))
  :config
  ;; Must include if 'linum-mode' activated (common in 'prog-mode')
  ;; because 'git-gutter' does not work with 'linum-mode'.
  (use-package git-gutter-fringe
    :commands git-gutter-mode
    :config (global-git-gutter-mode)))
#+end_src

* Productivity
** Projectile

The =projectile= package provides a number of project interaction
features [[[https://github.com/bbatsov/projectile][github/projectile]]].

#+begin_src emacs-lisp
(use-package projectile
  :init (projectile-mode 1)
  ;; :custom
  ;; ;; cache to prevent slow 'projectil-find-file' on larger projects
  ;; (projectile-enable-caching t)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map)))
#+end_src

** Yankpad

The =Yankpad= package streamlines the mundane insertion of text
snippets.

#+begin_src emacs-lisp
(use-package yankpad
  :ensure t
  :defer 10
  :init (setq yankpad-file "~/.org/yankpad.org")
  :config
  ;; Always require user to provide snippet category before 'yankpad-insert'
  (advice-add 'yankpad-insert :before (lambda () (setq yankpad-category nil))))
#+end_src

* Custom Function
** Create :file Link to Current Buffer

#+begin_src emacs-lisp
(defun create-file-link-from-current-buffer ()
  "Build [[:file file-path][file-name]] org-link from current
buffer.

The function 'buffer-file-name' returns the absolute path of the
buffer, which breaks should other users open the link. Instead,
the relative path is referenced using the 'abbreviate-file-name'
function."

  (interactive)
  (if-let ((absolute-path (buffer-file-name)))
      (kill-new (message "[[file:%s][%s]]"
                         (abbreviate-file-name absolute-path)
                         (buffer-name)))
    (message "Buffer is not a file")))

(global-set-key (kbd "C-c L") 'create-file-link-from-current-buffer)
#+end_src

* Conclusion

Ta-dah!

#+begin_src emacs-lisp
;;; init.el ends here
#+end_src
